// class table inheritance for users and usertypes with shared userId key

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum CompetitiveLevel {
  RECREATIONAL
  COMPETITIVE
}

enum UserType {
  PARENT
  STUDIO
  INSTRUCTOR
  RETAILER
}

// type 'User' for all user types, with common fields and auth requirements
model User {
  userId     String      @id @default(uuid()) // UUID type
  email      String      @unique
  password   String
  type       UserType
  instructor Instructor?
  parent     Parent?
  studio     Studio?
}

// user subtypes
model Studio {
  userId        String         @id
  name          String
  ageLevels      AgeLevel[]
  danceClasses    DanceClass[]
  enrollments    Enrollment[]
  footwear      Footwear[]
  skillLevels    SkillLevel[]
  user          User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  stylesOfDance  StyleOfDance[]
  tights        Tights[]
  instructors   Instructor[]
}

model Parent {
  userId     String       @id
  firstName  String
  lastName   String
  danceClasses DanceClass[]
  dancers     Dancer[]
  user       User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parentNotes ParentNote[]
}

model Instructor {
  userId     String       @id
  firstName  String
  lastName   String
  danceClasses DanceClass[]
  user       User         @relation(fields: [userId], references: [userId])
  studios     Studio[]
}

model AgeLevel {
  id          String       @id
  name        String
  description String?
  studioId    String
  Studio      Studio       @relation(fields: [studioId], references: [userId], onDelete: Cascade)
  danceClasses  DanceClass[]
}

model DanceClass {
  id                        String       @id
  name                      String
  performanceName           String?
  styleOfDanceId            String
  footwearId                String?
  tightsId                  String?
  song                      String?
  competitions              Boolean?
  recital                   Boolean
  instructorId              String?
  ageLevelId                String
  skillLevelId              String
  startTime                 String?
  endTime                   String?
  dayOfWeek                 String?
  competitionEntryTime      String?
  competitionEntryDayOfWeek String?
  studioNotes               String?
  competitionEntryNumber    String?
  competitionName           String?
  compScheduleUrl           String?
  ageLevel                  AgeLevel     @relation(fields: [ageLevelId], references: [id])
  footwear                  Footwear?    @relation(fields: [footwearId], references: [id])
  instructor                Instructor?  @relation(fields: [instructorId], references: [userId])
  parent                    Parent?      @relation(fields: [parentId], references: [userId], onDelete: Cascade)
  parentId                  String?
  skillLevel                SkillLevel   @relation(fields: [skillLevelId], references: [id])
  studio                    Studio?      @relation(fields: [studioId], references: [userId], onDelete: Cascade)
  studioId                  String?
  styleOfDance              StyleOfDance @relation(fields: [styleOfDanceId], references: [id])
  tights                    Tights?      @relation(fields: [tightsId], references: [id])
  enrollments                Enrollment[]
  schedules                  Schedule[]
}

model Dancer {
  id            String       @id
  firstName     String
  lastName      String
  birthdate     DateTime?
  parentId      String
  imageFilename String?
  parent        Parent       @relation(fields: [parentId], references: [userId], onDelete: Cascade)
  enrollments    Enrollment[]
}

model Enrollment {
  id           String     @id
  dancerId     String
  danceClassId String
  studioId     String
  requested    DateTime?  @default(now())
  approved     DateTime?  @default(now())
  danceClass   DanceClass @relation(fields: [danceClassId], references: [id], onDelete: Cascade)
  dancer       Dancer     @relation(fields: [dancerId], references: [id], onDelete: Cascade)
  studio       Studio     @relation(fields: [studioId], references: [userId], onDelete: Cascade)
}

model Footwear {
  id            String       @id
  name          String
  description   String?
  url           String?
  studioId      String
  imageFilename String?
  color         String?
  danceClasses    DanceClass[]
  studio        Studio       @relation(fields: [studioId], references: [userId], onDelete: Cascade)
}

model ParentNote {
  id        String   @id
  parentId  String
  note      String
  createdAt DateTime @default(now())
  parent    Parent   @relation(fields: [parentId], references: [userId], onDelete: Cascade)
}

model Schedule {
  id           String     @id
  danceClassId String
  startTime    DateTime
  endTime      DateTime
  dayOfWeek    String
  danceClass   DanceClass @relation(fields: [danceClassId], references: [id], onDelete: Cascade)
}

model SkillLevel {
  id          String       @id
  name        String
  description String?
  studioId    String
  danceClasses  DanceClass[]
  studio      Studio       @relation(fields: [studioId], references: [userId], onDelete: Cascade)
}

model StyleOfDance {
  id          String       @id
  name        String
  description String?
  studioId    String
  danceClasses  DanceClass[]
  studio      Studio       @relation(fields: [studioId], references: [userId], onDelete: Cascade)
}

model Tights {
  id            String       @id
  name          String
  description   String?
  url           String?
  imageFilename String?
  studioId      String
  color         String?
  danceClasses    DanceClass[]
  studio        Studio       @relation(fields: [studioId], references: [userId], onDelete: Cascade)
}



